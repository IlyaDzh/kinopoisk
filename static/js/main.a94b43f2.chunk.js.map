{"version":3,"sources":["components/Header.js","components/Content.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","src","alt","React","Component","Content","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0MA0CeA,E,iLAtCP,OACI,4BAAQC,UAAU,UACd,yBAAKA,UAAU,gBAEX,yBAAKA,UAAU,6BACX,yBAAKA,UAAU,eACX,yBAAKA,UAAU,eAAeC,IAAI,2EAA2EC,IAAI,UAErH,yBAAKF,UAAU,eACX,yBAAKA,UAAU,kBACX,iEAGR,yBAAKA,UAAU,eACX,yBAAKA,UAAU,eAAf,SAMR,yBAAKA,UAAU,UACX,yBAAKA,UAAU,wCACX,yBAAKA,UAAU,cACX,wBAAIA,UAAU,oBACV,4BAAI,4BAAQA,UAAU,kBAAlB,mCACJ,4BAAI,4BAAQA,UAAU,kBAAlB,kEACJ,4BAAI,4BAAQA,UAAU,kBAAlB,oG,GA5BnBG,IAAMC,WCYZC,E,iLAVP,OACI,yBAAKL,UAAU,WACX,yBAAKA,UAAU,gBAAf,gB,GAJMG,IAAMC,WCgBbE,G,6LATP,OACI,yBAAKN,UAAU,OACX,kBAAC,EAAD,MACA,kBAAC,EAAD,W,GALEG,IAAMC,YCKJG,QACa,cAA7BC,OAAOC,SAASC,UAEa,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACrB,2DCbRC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4HzC,kBAAmBC,WACnBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GAC/BA,EAAaC,iB","file":"static/js/main.a94b43f2.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nclass Header extends React.Component {\r\n    render() {\r\n        return (\r\n            <header className=\"header\">\r\n                <div className='pl-container'>\r\n\r\n                    <div className='pl-row align-items-center'>\r\n                        <div className='pl-col-md-3'>\r\n                            <img className='header__logo' src='https://upload.wikimedia.org/wikipedia/ru/9/96/Kinopoisk_logo_orange.png' alt='logo' />\r\n                        </div>\r\n                        <div className='pl-col-md-6'>\r\n                            <div className='header__search'>\r\n                                <div>Поиск</div>\r\n                            </div>\r\n                        </div>\r\n                        <div className='pl-col-md-3'>\r\n                            <div className='header__git'>\r\n                                git\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className='pl-row'>\r\n                        <div className='pl-col d-flex justify-content-center'>\r\n                            <nav className='header-nav'>\r\n                                <ul className='header-nav__list'>\r\n                                    <li><button className='pl-button link'>Афиша</button></li>\r\n                                    <li><button className='pl-button link'>В избранном</button></li>\r\n                                    <li><button className='pl-button link'>Случайный фильм</button></li>\r\n                                </ul>\r\n                            </nav>\r\n                        </div>\r\n                    </div>\r\n\r\n                </div>\r\n            </header>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\n\r\nclass Content extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className='content'>\r\n                <div className='pl-container'> \r\n                    Content\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Content;","import React from 'react';\n\nimport Header from './components/Header';\nimport Content from './components/Content';\nimport 'plain-css/dist/plain.min.css';\nimport './css/main.css';\n\nclass App extends React.Component {\n    render() {\n        return (\n            <div className=\"App\">\n                <Header />\n                <Content />\n            </div>\n        );\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                        'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (\n                response.status === 404 ||\n                (contentType != null && contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            );\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then(registration => {\n            registration.unregister();\n        });\n    }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();"],"sourceRoot":""}